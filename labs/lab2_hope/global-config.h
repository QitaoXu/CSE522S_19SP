/** @file global-config.h
 * 
 * @brief Team members: Qitao Xu, Zhe Wang, Jiangnan Liu
 * 		  The header file was generated by initializing the parameters by hand.
 *		  Qitao Xu first initialized the values then Jiangnan Liu and Zhe Wang tuned the values. 
 * 		  The use case for this header file is  
 * @par       
*/ 

#include "basic.h"

#define num_subtask 11
#define num_core 4
#define num_task 4

#define task_index0 0
#define task_index1 1
#define task_index2 2
#define task_index3 3

#define core_index0 0
#define core_index1 1
#define core_index2 2
#define core_index3 3

#define subtask_index0 0
#define subtask_index1 1
#define subtask_index2 2
#define subtask_index3 3

#define subtask_count0 4
#define subtask_count1 3
#define subtask_count2 2
#define subtask_count3 2

#define task_period0 2000
#define task_period1 2000
#define task_period2 2000
#define task_period3 2000

#define loop_count 9804
#define exec_time_0_0 10
#define exec_time_0_1 10
#define exec_time_0_2 10
#define exec_time_0_3 10

#define exec_time_1_0 10
#define exec_time_1_1 10
#define exec_time_1_2 10

#define exec_time_2_0 10
#define exec_time_2_1 10

#define exec_time_3_0 10
#define exec_time_3_1 10
#define HIGHEST_PRIORITY 99
#define DEFAULT_PRIORITY 1
Core cores[num_core];
Task tasks[num_task];
Subtask* subtask_ptrs[num_subtask];

struct task_struct * subtask_kthreads[num_subtask];
struct task_struct * calibrate_kthreads[num_core];

//task
//  int period; /*period of task second*/
//  int num;/* number of subtask */
//  int index; /* index of task */
//  int execution_time; /*execution time of all subtask*/
//  struct Subtask subtask_list[];

//subtask
//  int idx_in_task; /*index of subtask within the task*/
//  int idx_in_core; /*index of subtask within the core*/
//  int core; /* on which core of your Raspberry Pi 3 each subtask should run, set core to -1 if no aviable core to run*/
//  struct Task *parent; /*parent task of subtask*/
//  int work_load_loop_count; /*init to 0 or Z+, */
//  ktime_t last_release_time; /*initialized to 0, record the last time the subtask was released*/
//  int cumul_exec_time;/* sum up the execution times of that subtask and all of its predecessors within the same task*/
//  int utilization; /*divide its execution time by its task's period.*/
//  int execution_time;/*execution time of subtask millisecond*/
//  struct task_struct *sub_thread; /*pointer to the task_struct*/
//  char* kthread_id;
//  struct hrtimer hr_timer; /* timer for the subtask*/
//  int flag; /*if the subtask is temporarily not available, */
//  int relative_ddl; /*task period* subtask's execution time/task's execution time*/
//  int sched_priori;  /*priority of subtask on the core*/

struct Task task_0 =
{
  task_period0,
  subtask_count0,
  task_index0,
  0,
  {
    {
      subtask_index0,
      -1,
      -1,
      NULL,
      loop_count*exec_time_0_0,
      NULL,
      0,
      0,
      exec_time_0_0,
      NULL, //struct task_struct *sub_thread, init in runtime;
      NULL,
      NULL, //struct hrtimer hr_timer, init in runtime;
      -1,
      0,
      DEFAULT_PRIORITY
    },
    {
      subtask_index1,
      -1,
      -1,
      NULL,
      loop_count*exec_time_0_1,
      NULL,
      0,
      0,
      exec_time_0_1,
      NULL, //struct task_struct *sub_thread;
      NULL,
      NULL, //struct hrtimer hr_timer;
      -1,
      0,
      DEFAULT_PRIORITY
    },
    {
      subtask_index2,
      -1,
      -1,
      NULL, //struct Task *parent; 
      loop_count*exec_time_0_2,
      NULL,
      0,
      0,
      exec_time_0_2,
      NULL, //struct task_struct *sub_thread;
      NULL,
      NULL, //  struct hrtimer hr_timer;
      -1,
      0,
      DEFAULT_PRIORITY
    },
    {
      subtask_index3,
      -1,
      -1,
      NULL, //struct Task *parent; 
      loop_count*exec_time_0_3,
      NULL,
      0,
      0,
      exec_time_0_3,
      NULL, //struct task_struct *sub_thread;
      NULL,
      NULL, //  struct hrtimer hr_timer;
      -1,
      0,
      DEFAULT_PRIORITY
    }
  }
};


struct Task task_1 =
{
  task_period1,
  subtask_count1,
  task_index1,
  0,
  {
    {
      subtask_index0,
      -1,
      -1,
      NULL, //struct Task *parent; 
      loop_count*exec_time_1_0,
      NULL,
      0,
      0,
      exec_time_1_0,
      NULL, //struct task_struct *sub_thread;
      NULL,
      NULL, //  struct hrtimer hr_timer;
      -1,
      0,
      DEFAULT_PRIORITY
    },
    {
      subtask_index1,
      -1,
      -1,
      NULL, //struct Task *parent; 
      loop_count*exec_time_1_1,
      NULL,
      0,
      0,
      exec_time_1_1,
      NULL, //struct task_struct *sub_thread;
      NULL,
      NULL, //  struct hrtimer hr_timer;
      -1,
      0,
      DEFAULT_PRIORITY
    },
    {
      subtask_index2,
      -1,
      -1,
      NULL, //struct Task *parent; 
      loop_count*exec_time_1_2,
      NULL,
      0,
      0,
      exec_time_1_2,
      NULL, //struct task_struct *sub_thread;
      NULL,
      NULL, //  struct hrtimer hr_timer;
      -1,
      0,
      DEFAULT_PRIORITY
    }
  }
};

struct Task task_2 =
{
  task_period2,
  subtask_count2,
  task_index2,
  0,
  {
    {
      subtask_index0,
      -1,
      -1,
      NULL, //struct Task *parent; 
      loop_count*exec_time_2_0,
      NULL,
      0,
      0,
      exec_time_2_0,
      NULL, //struct task_struct *sub_thread;
      NULL,
      NULL, //  struct hrtimer hr_timer;
      -1,
      0,
      DEFAULT_PRIORITY
    },
    {
      subtask_index1,
      -1,
      -1,
      NULL, //struct Task *parent; 
      loop_count*exec_time_2_1,
      NULL,
      0,
      0,
      exec_time_2_1,
      NULL, //struct task_struct *sub_thread;
      NULL,
      NULL, //  struct hrtimer hr_timer;
      -1,
      0,
      DEFAULT_PRIORITY
    }
  }
};

struct Task task_3 =
{
  task_period3,
  subtask_count3,
  task_index3,
  0,
  {
    {
      subtask_index0,
      -1,
      -1,
      NULL, //struct Task *parent; 
      loop_count*exec_time_3_0,
      NULL,
      0,
      0,
      exec_time_3_0,
      NULL, //struct task_struct *sub_thread;
      NULL,
      NULL, //  struct hrtimer hr_timer;
      -1,
      0,
      DEFAULT_PRIORITY
    },
    {
      subtask_index1,
      -1,
      -1,
      NULL, //struct Task *parent; 
      loop_count*exec_time_3_1,
      NULL,
      0,
      0,
      exec_time_3_1,
      NULL, //struct task_struct *sub_thread;
      NULL,
      NULL, //  struct hrtimer hr_timer;
      -1,
      0,
      DEFAULT_PRIORITY
    }
  }
};

//core
//  int core_index; /*cpu core index */
//  int num;/* number of subtask */
//  struct Subtask* subtask_list[];

struct Core core_0 =
{
  core_index0,
  0,
  NULL //subtask_list[]
};

struct Core core_1 =
{
  core_index1,
  0,
  NULL //subtask_list[]
};

struct Core core_2 =
{
  core_index2,
  0,
  NULL //subtask_list[]
};

struct Core core_3 =
{
  core_index3,
  0,
  NULL //subtask_list[]
};


void init_spec_vars(void);

void init_spec_vars() {
	cores[0] = core_0;
  cores[1] = core_1;
	cores[2] = core_2;
  cores[3] = core_3;
  tasks[0] = task_0;
  tasks[1] = task_1;
  tasks[2] = task_2;
  tasks[3] = task_3;
}