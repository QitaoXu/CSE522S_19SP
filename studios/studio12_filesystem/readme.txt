1. As the answer to the first exercise, list the names of the people who worked together on this studio.
Zhe Wang, Qitao Xu, Jiangnan Liu

2. Compile and run your program, and as the answer to this exercise show the code you have developed so far.
See p2.c

3. As the answer to this exercise, please show your program's output in both cases.
case (1): valid filesystem object
inotify initialized successfully, fd is 3
inotify_add_watch successfully, fd is 1

case (2): invalid filesystem object
inotify initialized successfully, fd is 3
inotify_add_watch successfully, fd is 1

4. As the answer to this exercise, please show what appeared in both terminal windows, and please explain briefly what events were generated by each use of ls, touch, and mv.
Output of program:
[zhe.wang@linuxlab006 os12]$ ./p2 /tmp/compile/zhe.wang/to12
inotify initialized successfully, fd is 3
inotify_add_watch successfully, fd is 1
The file new was created.
The file new was updated.
The file new was updated.

Output of operations:
[zhe.wang@linuxlab006 to12]$ touch new
[zhe.wang@linuxlab006 to12]$ mv new ..
[zhe.wang@linuxlab006 to12]$ mv ../new .
[zhe.wang@linuxlab006 to12]$ touch new

Explain: when a file is create, a event of creating is detected and a event of attribute updating is detected; when a file's timestamp is updated, a event of creating attribute updating is detected. This is because the operations raise events and they can be noticed by the operating system which in turn capture the events and tell the user program via inotify syscall.

5. As the answer to this exercise, please explain how the events your program saw differed from those it saw in the previous exercise, and what that tells you about what happens when a second watch is added to the same inotify instance for the same filesystem object.
When "mv new .." and "mv ../new .", more outputs are shown "The file new was moved". It means that the event of moving a file is detected.

Output of program:
[zhe.wang@linuxlab006 os12]$ ./p2 /tmp/compile/zhe.wang/to12
inotify1 initialized successfully, fd is 3
inotify2 initialized successfully, fd is 4
inotify_add_watch1 successfully, fd is 1
inotify_add_watch2 successfully, fd is 1
The file new was created.
The file new was updated.
The file new was moved.
The file new was moved.
The file new was updated.

Operations:
[zhe.wang@linuxlab006 to12]$ touch new
[zhe.wang@linuxlab006 to12]$ mv new ..
[zhe.wang@linuxlab006 to12]$ mv ../new .
[zhe.wang@linuxlab006 to12]$ touch new
[zhe.wang@linuxlab006 to12]$ rm new
[zhe.wang@linuxlab006 to12]$ touch new
[zhe.wang@linuxlab006 to12]$ mv new ..
[zhe.wang@linuxlab006 to12]$ mv ../new .
[zhe.wang@linuxlab006 to12]$ touch new

6. As the answer to this exercise, please show your program's output, indicate whether or not your program was successful creating new watches, and after that observing events that occured for those new filesystem objects as well as still observing events that occurred for the previously watched one(s).
Output of program:
[zhe.wang@linuxlab006 os12]$ ./p2 /tmp/compile/zhe.wang/to12
inotify initialized successfully, fd is 3
inotify_add_watch1 successfully, fd is 1
new was created.
new was updated.
test was created.
new2 was created.
new2 was updated.
new was updated.

Operations:
[zhe.wang@linuxlab006 to12]$ touch new
[zhe.wang@linuxlab006 to12]$ mkdir test
[zhe.wang@linuxlab006 to12]$ touch test/new2
[zhe.wang@linuxlab006 to12]$ touch new

Unless creating a new file in a new created folder, the program can always create new watches. This is because the event.name is relative path but inotify_add_watch needs abs path. Since inotify itself is hard to achieve the abs path, the program can only create new watches for the child of the input path by concating event.name and the input path. 